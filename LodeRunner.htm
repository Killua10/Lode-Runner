<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Lode Runner par Ariel Sashcov et Mohamed Cherifi</title>
  <link rel="stylesheet" type="text/css" href="" />
  <!-- Code JavaScript local -->
  <script type="text/javascript">
  //variables du canvas
	var objCanvas = null;
	var objC2D = null;
	var objCycleAnimation = null;
  //objets du jeu
	var objImageFond = null;
  var objImageEchelle = null;
  var objImageCorde = null;
  var objImageMur = null;
  var objImageOr = null;
  var objImageBase = null;
  //variables de touche
  var binDroite = false;
  var binGauche = false;
  var binMonter = false;
  var binDescendre = false;
  var binSurCorde = false;
  //variable de score
  var intCompteurOR = 0;
  var intScore = 0;
  var intCompteurNiveau = 1;
  var intCompteurVie = 5;
  //variable pour le chronometre
  var intHeureChrono = 0;
  var intMinuteChrono = 0;
  var intSecondeChrono = 0;
  var intMiliSecondeChrono = 0;
  var objDateHeure1 = new Date().getTime();
  var chronoMarche = false;
  var intMsEcoulees = 0;
  //tableau du niveau
  var tabMappe = [ ['F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['F','F','F','F','O','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['M','M','M','M','M','M','M','E','M','M','M','M','M','M','M','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','E','C','C','C','C','C','C','C','C','C','C','F','F','F','F','F','O','F','F','F','F'],
                   ['F','F','F','F','F','F','F','E','F','F','F','F','M','M','E','F','F','F','M','M','M','M','M','M','M','E','M','M'],
                   ['F','F','F','F','F','F','F','E','F','F','F','F','M','M','E','F','F','F','F','F','F','F','F','F','F','E','F','F'],
                   ['F','F','F','F','F','F','F','E','F','F','F','F','M','M','E','F','F','F','F','F','F','F','O','F','F','E','F','F'],
                   ['M','M','E','M','M','M','M','M','F','F','F','F','M','M','M','M','M','M','M','M','E','M','M','M','M','M','M','M'],
                   ['F','F','E','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','E','F','F','F','F','F','F','F'],
                   ['F','F','E','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','E','F','F','F','F','F','F','F'],
                   ['M','M','M','M','M','M','M','M','M','E','M','M','M','M','M','M','M','M','M','M','E','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','F','F','E','F','F','F','F','F','F','F','F','F','F','E','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','O','F','E','C','C','C','C','C','C','C','C','C','C','E','F','F','F','O','F','F','F'],
                   ['F','F','F','F','E','M','M','M','M','M','M','F','F','F','F','F','F','F','F','F','M','M','M','M','M','M','M','E'],
                   ['F','F','F','F','E','F','F','F','F','F','F','F','F','F','F','F','F','F','O','F','F','F','F','F','F','F','F','E'],
                   ['M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M','M'],
                   ['B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B','B'],
                   ['F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'],
                   ['F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F','F'] ];

  var tabObjMap = new Array(17);

    function initAnimation() {
        objCanvas = document.getElementById('monCanvas');
        objC2D = objCanvas.getContext('2d');
        objC2D.imageSmoothingEnabled = false;
        intMinuteChrono = ajouteZeros(intMinuteChrono);
        intSecondeChrono = ajouteZeros(intSecondeChrono);
        for (var i = 0; i < tabObjMap.length; i++) {
          tabObjMap[i] = new Array();
        }
        initImageFond();
        initRunner();
        initFantome();
        initSons();
	      dessiner(); // Dessiner une première fois
        animer();

    }

    // initialisation des images de fond
    function initImageFond() {
        objImageFond = new Image();
        objImageFond.src = 'img/F.png';

				objImageEchelle = new Image();
        objImageEchelle.src = 'img/E.png';

				objImageCorde = new Image();
        objImageCorde.src = 'img/C.png';

				objImageMur = new Image();
        objImageMur.src = 'img/M.png';

				objImageOr = new Image();
        objImageOr.src = 'img/O.png';

				objImageBase = new Image();
        objImageBase.src = 'img/B.png';

    }

    // initialisation des sons de jeu
    function initSons(){
      objSons = new Object();

      var objSon = document.createElement('audio');
      objSon.volume = 0.2;
      objSon.setAttribute('src', 'sons/coin.mp3');
      objSon.load();
      objSons.rammaserOr = objSon;

      objSon = document.createElement('audio');
      objSon.setAttribute('src', 'sons/levelup.mp3');
      objSon.load();
      objSons.levelup = objSon;
    }

    //Un cycle d'animation
    function animer() {
        // Requête pour le prochain cycle
        objCycleAnimation = requestAnimationFrame(animer);
    		// Le cycle d'animation
    		effacerDessin();
    		mettreAjourAnimation();
    		dessiner();
	}

  //Arrêter l'animation
	function arreterAnimation() {
	    if (objCycleAnimation != null)
	        cancelAnimationFrame(objCycleAnimation);
	}

	// Pour effacer le dessin
	function effacerDessin() {
		objC2D.clearRect(0,0, objCanvas.width, objCanvas.height);
	}

  // initialisation du Runner (personnage principal)
  function initRunner(){
    var objImageDebut = new Image();
    objImageDebut.src = 'img/debut.png';
    var objImageDroit = new Image();
    objImageDroit.src = 'img/courirDroit.png';
    var objImageGauche = new Image();
    objImageGauche.src = 'img/courirGauche.png';
    var objImageMonter = new Image();
    objImageMonter.src = 'img/monter.png';
    var objImageCordeDroite = new Image();
    objImageCordeDroite.src = 'img/cordeDroit.png';
    var objImageCordeGauche = new Image();
    objImageCordeGauche.src = 'img/cordeGauche.png';


    objRunner = new Object();
    objRunner.objImage = objImageDebut;
    objRunner.objAnimationDroit = objImageDroit;
    objRunner.objAnimationGauche = objImageGauche;
    objRunner.objAnimationMonter = objImageMonter;
    objRunner.objAnimationCordeDroite = objImageCordeDroite;
    objRunner.objAnimationCordeGauche = objImageCordeGauche;
    objRunner.intLongeur = 35;
    objRunner.intLargeur = 24;
    objRunner.intLargeur2 = 12;
    objRunner.posX = objCanvas.width/2;
    objRunner.posY = 577;
    objRunner.intVitesse = 4;
    objRunner.intDirection = 0; //-1=left, 0=middle, +1=right
    objRunner.binMonter = false;
    objRunner.binChute = false;
    objRunner.binSurMur = true;
    objRunner.binDescendre = false;
    objRunner.binCorde = false;
    objRunner.intFrame = 0;
    objRunner.intFrameGauche = 0;
    objRunner.intFrameDroit = 0;
    objRunner.intFrameMonter = 0;
    objRunner.intFrameDescendre = 0;
    objRunner.intFrameChute = 0;
    objRunner.intFrameCordeDroite = 0;
    objRunner.intFrameCordeGauche = 0;
  }

  //initialisation du fantome (guardien)
  function initFantome(){

    //tabObjFantomes = new Array();
    var objFantome = null;

    objFantome = new Object();
      var objImageFantome0 = new Image();
      objImageFantome0.src = 'img/fantome0.png';

      objFantome.objImage = objImageFantome0;
      objFantome.intVitesse = 2;
      objFantome.intFrame = 0;
      objFantome.posX = 300; // random
      objFantome.posY = 575; // random
    //tabObjFantomes.push(objFantome);

    /*var objImageFantome1 = new Image();
    objImageFantome1.src = 'img/fantome1.png';
    var objImageFantome2 = new Image();
    objImageFantome2.src = 'img/fantome2.png';
    var objImageFantome3 = new Image();
    objImageFantome3.src = 'img/fantome3.png';
    var objImageFantome4 = new Image();
    objImageFantome4.src = 'img/fantome4.png';
    var objImageFantome5 = new Image();
    objImageFantome5.src = 'img/fantome5.png';*/


  }

  function dessinerFantome(posX, posY, intFrame){
    objC2D.save();
    objC2D.globalAlpha = 0.8;

    /*for (var noFantome = 0; noFantome < tabObjFantomes.length; noFantome++) {
      var objFantome = tabObjFantomes[noFantome];



    }*/

    objC2D.drawImage(objFantome.objImage, (objFantome.objImage.width/12)*intFrame, 0, 36, 40, objFantome.posX-12, objFantome.posY-12, 36, 40);

    objC2D.restore();

  }


	// Pour mettre à jour l'animation
	function mettreAjourAnimation(){

    animationRunner();
    collisionOr();
    collisionEchelle();
    collisionMur();
    collisionCorde();

    if (chronoMarche) {
        var objDateHeure2 = (new Date()).getTime();
        intMsEcoulees =  objDateHeure2 - objDateHeure1;

        objDateHeure1 = objDateHeure2;

       intMiliSecondeChrono += intMsEcoulees;

       intMinuteChrono = parseInt((intMiliSecondeChrono/(1000*60))%60)
       intSecondeChrono = ((intMiliSecondeChrono % 60000) / 1000).toFixed(0);

       intMinuteChrono = ajouteZeros(intMinuteChrono);
       intSecondeChrono = ajouteZeros(intSecondeChrono);

   }

	}

  /******************************************************************************************
    * ajouteZeros(intNbr)
    * Ajoute un zero si le nombre est plus petit que 10.
    *
    *****************************************************************************************/
  function ajouteZeros(intNbr) {

  return (intNbr < 10 ? '0' : '') + intNbr;

  }

  /******************************************************************************************
    * collisionEchelle()
    * Verifie une collision entre le point X,Y du personnage avec les points X,Y
    * des lingots d'or
    *
    *****************************************************************************************/
  function collisionOr(){

    for (var row = 0; row < tabObjMap.length; row++) {
      for (var col = 0; col < tabObjMap[row].length; col++) {
        var objet = new Object();

        if (tabObjMap[row][col].objNom == "OR") {
          if (objRunner.posX >= tabObjMap[row][col].posX - 20 && objRunner.posX <= tabObjMap[row][col].posX + 20 &&
            objRunner.posY >= tabObjMap[row][col].posY - 20 && objRunner.posY <= tabObjMap[row][col].posY + 20) {

              objet.objNom = "FOND";
              objet.objImage = objImageFond;
              objet.intLongeur = 40;
              objet.intLargeur = 40;
              objet.posX = tabObjMap[row][col].posX;
              objet.posY = tabObjMap[row][col].posY;

              tabMappe[row][col] = 'F';
              tabObjMap[row][col] = objet;
              objSons.rammaserOr.play();
              intCompteurOR++;
              intScore += 250;

          }
        }
      }
    }

  }

  /******************************************************************************************
    * collisionEchelle()
    * Verifie une collision entre le point X,Y du personnage avec les points X,Y des echelles
    *
    *****************************************************************************************/
  function collisionEchelle(){

    binMonter = false;
    var x = 0;
    var y = 0;
    binDescendre = false;

    for (var row = 0; row < tabObjMap.length; row++) {
      for (var col = 0; col < tabObjMap[row].length; col++) {


        // Checks if its a ladder
        if (tabObjMap[row][col].objNom == "ECHELLE") {
          // the square where the ladder is
          if (objRunner.posX  >= tabObjMap[row][col].posX - 20 && objRunner.posX <= tabObjMap[row][col].posX + 20 &&
            objRunner.posY + 20 >= tabObjMap[row][col].posY - 20 && objRunner.posY + 20 <= tabObjMap[row][col].posY + 20) {

              binMonter = true;
              if (objRunner.binMonter) {
                objRunner.posX = tabObjMap[row][col].posX;
              }
          }

          if (objRunner.posX  >= tabObjMap[row][col].posX - 20 && objRunner.posX   <= tabObjMap[row][col].posX + 20 &&
            objRunner.posY + 23 >= tabObjMap[row][col].posY - 20  && objRunner.posY + 23   <= tabObjMap[row][col].posY + 20 ) {

              binDescendre = true;
              if (objRunner.binDescendre) {
                objRunner.posX = tabObjMap[row][col].posX;
              }

          }



        }
      }
    }
  }

/******************************************************************************************
  * collisionMur()
  * Verifie une collision entre le point X,Y du personnage avec les points X,Y des murs
  *
  *****************************************************************************************/
  function collisionMur(){

    objRunner.binSurMur = false;

    for (var row = 0; row < tabObjMap.length; row++) {
      for (var col = 0; col < tabObjMap[row].length; col++) {



        if (tabObjMap[row][col].objNom == "MUR" || tabObjMap[row][col].objNom == "ECHELLE") {
          // Detection du mur de brick en dessous du runner
          if (objRunner.posX  >= tabObjMap[row][col].posX - 20 && objRunner.posX   <= tabObjMap[row][col].posX + 20 &&
            objRunner.posY + 23 >= tabObjMap[row][col].posY - 20  && objRunner.posY + 23   <= tabObjMap[row][col].posY + 20 ) {

              objRunner.binSurMur = true;

          }
        }
      }
    }
  }

  /******************************************************************************************
    * collisionCorde()
    * Verifie une collision entre le point X,Y du personnage avec les points X,Y de la corde
    *
    *****************************************************************************************/
  function collisionCorde(){

    binSurCorde = false;

    for (var row = 0; row < tabObjMap.length; row++) {
      for (var col = 0; col < tabObjMap[row].length; col++) {

        if (tabObjMap[row][col].objNom == "CORDE") {
          // the square where the rope is
          if (objRunner.posX >= tabObjMap[row][col].posX - 20 && objRunner.posX <= tabObjMap[row][col].posX + 20 &&
            objRunner.posY >= tabObjMap[row][col].posY - 20 && objRunner.posY <= tabObjMap[row][col].posY + 20) {

              binSurCorde = true;

              objRunner.posY = tabObjMap[row][col].posY;

          }
        }
      }
    }
  }


  function animationRunner(){
    // (FRAME) Animation pour le Runner

    if (objRunner.intDirection == 0) {
      objRunner.intFrame+=0.05;
      if (objRunner.intFrame >= 22) { // 22 frames dans l'image
        objRunner.intFrame -= 22;
      }
    }
    if (objRunner.intDirection == -1 && !binSurCorde) {
      objRunner.intFrameGauche+=1;
      if (objRunner.intFrameGauche >= 27) { // 27 frames dans l'image
        objRunner.intFrameGauche -= 27;
      }
    }
    if (objRunner.intDirection == 1 && !binSurCorde) {
      objRunner.intFrameDroit+=1;
      if (objRunner.intFrameDroit >= 27) { // 27 frames dans l'image
        objRunner.intFrameDroit -= 27;
      }
    }
    if (objRunner.binMonter) {
      objRunner.intFrameMonter+=0.3;
      if (objRunner.intFrameMonter >= 8) { // 8 frames dans l'image
        objRunner.intFrameMonter -= 8;
      }
    }
    if (objRunner.binDescendre) {
      objRunner.intFrameDescendre += 0.3
      if (objRunner.intFrameDescendre >= 8) { // 8 frames dans l'image
        objRunner.intFrameDescendre -= 8;
      }
    }
    if (binSurCorde && objRunner.intDirection == 1) {
      objRunner.intFrameCordeDroite += 0.3
      if (objRunner.intFrameCordeDroite >= 8) { // 8 frames dans l'image
        objRunner.intFrameCordeDroite -= 8;
      }
    }
    if (binSurCorde && objRunner.intDirection == -1) {
      objRunner.intFrameCordeGauche += 0.3
      if (objRunner.intFrameCordeGauche >= 8) { // 8 frames dans l'image
        objRunner.intFrameCordeGauche -= 8;
      }
    }


    if (objRunner.posX < objRunner.intLargeur - objRunner.intLargeur2) {
      objRunner.posX = objRunner.intLargeur;
      objRunner.posX = objRunner.posX-objRunner.intLargeur2;
    }

    if (objRunner.posX > (objCanvas.width - objRunner.intLargeur) + objRunner.intLargeur2) {
      objRunner.posX = objCanvas.width - objRunner.intLargeur;
      objRunner.posX = objRunner.posX+objRunner.intLargeur2;
    }


    if (binDroite && objRunner.intDirection != 38) {
      objRunner.intDirection = 1;
      objRunner.posX += objRunner.intVitesse;

    }

    if (binGauche && objRunner.intDirection != 38 ) {
      objRunner.intDirection = -1;
      objRunner.posX -= objRunner.intVitesse;

    }

    //binMonter est true ssi runner est sur echelle
    if (binMonter && objRunner.intDirection == 38) {
      objRunner.binMonter = true;
      objRunner.posY -= objRunner.intVitesse/2; //deplacement vers le haut

      binGauche = false;
      binDroite = false;

    }

    if (!objRunner.binSurMur) {
      objRunner.posY += objRunner.intVitesse;
    }

    if (binDescendre && objRunner.intDirection == 40) {
      objRunner.binDescendre = true;
      objRunner.posY += objRunner.intVitesse/2; //deplacement vers le bas
      //TODO: VERIFIER SI SE TROUVE SUR UNE ECHELLE A VANT DE MONTER!!
      binGauche = false;
      binDroite = false;
    }

    if (objRunner.binSurCorde && objRunner.intDirection == 1) {
      objRunner.posX += objRunner.intVitesse/4;
    }

    if (objRunner.binSurCorde && objRunner.intDirection == -1) {
      objRunner.posX -= objRunner.intVitesse/4;
    }

  }

  function dessinerRunner(x, y, intFrame){
    objC2D.save();

    var sx;
    var sy = 0;
    var sw = 0;
    var sh = 35;
    var dx = 0;
    var dy = 0;
    var dw = 0;
    var dh = 35;

    if (objRunner.intDirection == 0 && !binSurCorde) {
      sx = (524/22)*intFrame;
      sw = objRunner.objImage.width/22;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      dw = objRunner.objImage.width/22;
      objC2D.drawImage(objRunner.objImage, sx, sy, sw, sh, dx, dy, dw, dh);
    }else if (objRunner.intDirection == -1 && !binSurCorde) {
      sx = (826/27)*intFrame;
      sx = Math.floor(sx);
      sw = objRunner.objAnimationGauche.width/27;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      dw = objRunner.objAnimationGauche.width/27;
      objC2D.drawImage(objRunner.objAnimationGauche, sx, sy, sw, sh, dx, dy, dw, dh);
    }else if (objRunner.intDirection == 1 && !binSurCorde) {
      sx = (826/27)*intFrame;
      sw = objRunner.objAnimationDroit.width/27;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      dw = objRunner.objAnimationDroit.width/27;
      objC2D.drawImage(objRunner.objAnimationDroit, sx, sy, sw, sh, dx, dy, dw, dh);
    }

    if (objRunner.binMonter) {
      // (258px longeur / 8 frames)*vitesse
      sx = (258/8)*intFrame;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      objC2D.drawImage(objRunner.objAnimationMonter, sx, sy, 23, dh, dx, dy, 23, dh);
    }else if (objRunner.binDescendre) {
      // (258px longeur / 8 frames)*vitesse
      sx = (258/8)*intFrame;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      objC2D.drawImage(objRunner.objAnimationMonter, sx, sy, 23, dh, dx, dy, 23, dh);
    }

    if (binSurCorde && objRunner.intDirection == 1) {
      sx = (289/8)*intFrame;
      sw = objRunner.objAnimationCordeDroite.width/8;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      dw = objRunner.objAnimationCordeDroite.width/8;
      objC2D.drawImage(objRunner.objAnimationCordeDroite, sx, sy, sw, dh, dx, dy, dw, dh);
    }else if (binSurCorde && objRunner.intDirection == -1) {
      sx = (289/8)*intFrame;
      sw = objRunner.objAnimationCordeDroite.width/8;
      dx = objRunner.posX-12;
      dy = objRunner.posY-12;
      dw = objRunner.objAnimationCordeDroite.width/8;
      objC2D.drawImage(objRunner.objAnimationCordeGauche, sx, sy, sw, dh, dx, dy, dw, dh);
    }
    //
    objC2D.restore();

  }


	// Pour dessiner
	function dessiner() {
	    dessinerMappe();

      if (objRunner.intDirection == 0) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrame));
      }else if (objRunner.intDirection == -1 && !binSurCorde) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameGauche));
      }else if (objRunner.intDirection == 1 && !binSurCorde) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameDroit));
      }

      if (objRunner.binMonter) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameMonter));
      }else if (objRunner.intDirection == 40) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameDescendre));
      }

      if (binSurCorde && objRunner.intDirection == 1) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameCordeDroite));
      }else if (binSurCorde && objRunner.intDirection == -1) {
        dessinerRunner(objRunner.posX, objRunner.posY, Math.floor(objRunner.intFrameCordeGauche));
      }

      //TODO: CAUSE PROBLEME!! JE SAIS MAN!!
      //dessinerFantome(objFantome.posX, objFantome.posY, Math.floor(objFantome.intFrame));

      dessinerHUD();
      debug();


	}

  /*HEADS UP DISPLAY*/
  function dessinerHUD(){

    //Contour Score
    objC2D.beginPath(); // Définir un nouveau tracé
    objC2D.strokeStyle = 'rgb(236, 193, 13)';
    objC2D.rect(10, 680 + 10, 1100, 130);
    objC2D.lineWidth = 5;
    objC2D.stroke();
    objC2D.beginPath(); // Définir un nouveau tracé
    objC2D.strokeStyle = 'black';
    objC2D.rect(10, 680 + 10, 1100, 130);
    objC2D.lineWidth = 3;
    objC2D.stroke();

    // Score
    objC2D.beginPath();
    objC2D.fillStyle = 'rgb(236, 193, 13)';

    var strScore = 'Score:' + formatterScore(intScore,7);
    objC2D.font = '55pt Old English Text MT';

    objC2D.textAlign = "center";
    objC2D.textBaseline = "middle";
    objC2D.strokeStyle = 'black';

    objC2D.fillText(strScore, objCanvas.width / 4.49, 680 + 75 );
    objC2D.lineWidth = 2;
    objC2D.strokeText(strScore,  objCanvas.width / 4.49, 680 + 75 );

    // Chrono
    objC2D.beginPath();
    objC2D.fillStyle = 'rgb(148, 62, 13)';
    var strTemp = 'Temps:' + intMinuteChrono + ":" + intSecondeChrono;
    objC2D.font = '55pt Old English Text MT';
    objC2D.strokeStyle = 'black';
    objC2D.fillText(strTemp, objCanvas.width / 1.62, 680 + 75 );
    objC2D.lineWidth = 2;
    objC2D.strokeText(strTemp,   objCanvas.width / 1.62, 680 + 75);

    // Niveau

    objC2D.beginPath();
    objC2D.fillStyle = 'rgb(236, 193, 13)';
    var strTemp = 'Niveau:' + intCompteurNiveau;
    objC2D.font = '50pt Brush Script MT';
    objC2D.strokeStyle = 'black';
    objC2D.fillText(strTemp, objCanvas.width / 1.12, 650 + 75 );
    objC2D.lineWidth = 2;
    objC2D.strokeText(strTemp,   objCanvas.width / 1.12, 650 + 75);

    // Vie
    objC2D.beginPath();
    objC2D.fillStyle = 'rgb(236, 193, 13)';
    var strTemp = 'Vies:' + intCompteurVie;
    objC2D.font = '50pt Brush Script MT';
    objC2D.strokeStyle = 'black';
    objC2D.fillText(strTemp, objCanvas.width / 1.12, 710 + 75 );
    objC2D.lineWidth = 2;
    objC2D.strokeText(strTemp,   objCanvas.width / 1.12, 710 + 75);
  }

  var compteur = 0 ; //test
  function debug(){
    objC2D.textAlign = "left";
    objC2D.font="20px calibri";
    objC2D.fillStyle = 'lime';

    objC2D.fillText("MODE DEBUG: direction: " + objRunner.intDirection + " - up: "
    + objRunner.binMonter + " - surMur: " + objRunner.binSurMur + " - surCorde: " + binSurCorde +
    " - binDescendre: " + binDescendre + " - binMonter: " + binMonter,10,20);


     objC2D.fillStyle = 'lime';
     objC2D.beginPath();
     objC2D.fillRect(objRunner.posX, objRunner.posY, 5,5);

     objC2D.fillStyle = 'red';
     objC2D.fillRect(objRunner.posX, objRunner.posY+20, 5,5);

     objC2D.stroke();
     objC2D.fillStyle = 'lime';
     objC2D.closePath();
     objC2D.font="12px calibri";
     objC2D.fillText("(" + objRunner.posX + ", " + objRunner.posY + ")",objRunner.posX, objRunner.posY-25);





  }

  function formatterScore(intNbr, intTaille) {
    var strScore = "" + intNbr;
    while (strScore.length < intTaille) {
        strScore = "0" + strScore;
    }
    return strScore;
}



	// Pour dessiner l'image de fond
	function dessinerMappe() {
	    objC2D.save();  // Sauvegarde le contexte
      var intTailleTuile = 40;
			var intTuileX = intTailleTuile;
      var intTuileY = intTailleTuile;

      for (var row = 0; row < tabMappe.length; row++) {
        for (var col = 0; col < tabMappe[row].length; col++) {
          intTuileX = col * intTailleTuile;
					intTuileY = row * intTailleTuile;

          var objet = new Object();

          switch (tabMappe[row][col]) {
            case 'F': objC2D.drawImage(objImageFond, intTuileX, intTuileY, 40, 40);
            objet.objNom = "FOND";
            objet.objImage = objImageFond;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;

            case 'E': objC2D.drawImage(objImageEchelle, intTuileX, intTuileY, 40, 40);
            objet.objNom = "ECHELLE";
            objet.objImage = objImageEchelle;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;

            case 'C': objC2D.drawImage(objImageCorde, intTuileX, intTuileY, 40, 40);
            objet.objNom = "CORDE";
            objet.objImage = objImageCorde;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;

            case 'M': objC2D.drawImage(objImageMur, intTuileX, intTuileY, 40, 40);
            objet.objNom = "MUR";
            objet.objImage = objImageMur;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;

            case 'O': objC2D.drawImage(objImageOr, intTuileX, intTuileY, 40, 40);
            objet.objNom = "OR";
            objet.objImage = objImageFond;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;

            case 'B': objC2D.drawImage(objImageBase, intTuileX, intTuileY, 40, 40);
            objet.objNom = "BASE";
            objet.objImage = objImageBase;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
              break;
          }

          if (row < 17 && col < 28) {
            tabObjMap[row][col] = objet;
          }

          // Verification victoire
          if (intCompteurOR == 6 && col == 18 && row >= 0 && row <= 3 ) {
            objet.objNom = "ECHELLE";
            objet.objImage = objImageEchelle;
            objet.intLongeur = 40;
            objet.intLargeur = 40;
            objet.posX = intTuileX + 20;
            objet.posY = intTuileY + 20;
            objC2D.drawImage(objImageEchelle, intTuileX, intTuileY, 40, 40);
            tabObjMap[row][col] = objet;

          }



        }
      }
	    objC2D.restore(); // Restaure le contexte

	}


  function keyDown(){

    var x = event.keyCode;

    /*if (chronoMarche) {
      chronoMarche = false;
    }else {*/
      chronoMarche = true;
      objDateHeure1 = new Date();
    //}

    // Deplacement droite
    if (x == 39)  binDroite = true;
    // Deplacement gauche
    if (x == 37)  binGauche = true;
    // Monter
    if (x == 38 && binMonter == true){
      binMonter = true;
      objRunner.intDirection = 38;

    }

    // Descendre
    if (x == 40 && binDescendre == true){
      binDescendre = true;
      //binMonter = false;
      objRunner.intDirection = 40;
      //objRunner.binDescendre = true;
      //objRunner.intDirection = 0;
    }

  }

  function keyUp(){
    var x = event.keyCode;

    // Deplacement droite
    if (x == 39){
      binDroite = false;
      objRunner.intDirection = 0;
    }
    // Deplacement gauche
    if (x == 37){
      binGauche = false;
      objRunner.intDirection = 0;
    }
    // Monter
    if (x == 38){
      binMonter = false;
      objRunner.binMonter = false;
      objRunner.intDirection = 0;
    }

    // Descendre
    if (x == 40){
      binDescendre = false;
      objRunner.binDescendre = false;
      objRunner.intDirection = 0;
    }

  }

   </script>
</head>

<body onload="initAnimation()">
	<canvas id="monCanvas" width="1120" height="830" style="display: block; margin: auto;" onkeydown="keyDown()" onkeyup="keyUp()" tabindex="1">
		Votre navigateur ne supporte pas la balise canvas
	</canvas
</body>

</html>
